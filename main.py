import os
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import openai
from openai import OpenAI
from pydantic import BaseModel
from dotenv import load_dotenv



app = FastAPI(
     title="Content Fragment Generator",
     description="An API to generate ad campaigns using OpenAI's ChatGPT based on an image prompt and URL."
)

SYSTEM_PROMPT = """
Create an ad campaign by generating a structured response including a title, description, call-to-action text. Reference the Image URL to provide more context to the ad.

# Input Parameters

- **Image_prompt**: Provide a short text prompt describing the campaign theme.
- **Image_URL**: Provide the URL to an image that supports the campaign.

# Steps

1. Analyze the image prompt to understand the key themes, emotions, and messages.
2. If an image URL is provided, consider the elements, color, style, and mood of the image to provide more context to the title and description.
3. Generate a compelling title that captures the essence of the campaign or key product/service.
4. Write a persuasive and engaging description that outlines the benefits and key features.
5. Devise a strong call-to-action that encourages the target audience to take the desired step.

# Output Format

The output should be formatted in rich text suitable for web pages, using HTML tags as needed for styling:

- Title: **[Title]**
- Description: [Detailed paragraph(s) with highlights]
- Call-to-Action: **[CTA]** (formatted for emphasis)

# Examples

**Example 1:**

**Input:**
- Image prompt: "Create ad campaign for bikers in Las Vegas."
- Image URL: "http://example.com/eco-car.jpg"

**Output:**
- **Title:** <h2>Ride the Vegas Vibe</h2>
- **Description:** <p>Hit the open roads and iconic neon streets of Las Vegas on your dream bike! Whether you're cruising the Strip or exploring the stunning desert backdrop, our top-of-the-line bikes deliver power, comfort, and unforgettable style. Join the thriving Vegas biker community, and let every ride be an adventure you'll never forget.<em>Discover the future of bike riding today!</em></p>
- **Call-to-Action:** **<a href="#">Shop Now</a>**

# Notes

- Ensure the product description aligns with the content and theme depicted in the image.
- Emphasize unique selling points in both description and CTA.
- Maintain a consistent and engaging tone throughout the text.
- Do not prefix output with "Title or Description"
- Do not return a list of images."""

#Define a Pydantic model for request body validation
class AdCampaignInput(BaseModel):
    image_prompt: str
    image_url: str




@app.post("/generate_ad_campaign")
async def generate_ad_campaign_endpoint(input_data: AdCampaignInput):
    """
    API endpoint to generate an ad campaign using OpenAI's ChatGPT.
    Expects a JSON payload with 'image_prompt' and 'image_url'.
    """
    try:
        # Access validated data directly from input_data
        image_prompt = input_data.image_prompt
        image_url = input_data.image_url

        # Construct the user message for the OpenAI API call
        user_message_content = f"""- Image prompt: "{image_prompt}"\n- Image URL: "{image_url}" """

        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message_content}
        ]

        client = OpenAI()

        # Make the call to the OpenAI Chat Completions API
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # You can choose other models like "gpt-4"
            messages=messages,
            temperature=0.7,      # Controls randomness. Lower for more deterministic output.
            max_tokens=500        # Maximum tokens in the response. Adjust as needed.
        )

        # Extract the generated content
        if response.choices and response.choices[0].message.content:
            generated_ad = response.choices[0].message.content
            return JSONResponse(content={"ad_campaign": generated_ad}, status_code=200)
        else:
            raise HTTPException(status_code=500, detail="No ad campaign generated by OpenAI.")

    except openai.APIError as e:
        # Handle OpenAI specific API errors (e.g., invalid key, rate limits)
        raise HTTPException(status_code=e.status_code if hasattr(e, 'status_code') else 500,
                            detail=f"OpenAI API error: {e.response.text if hasattr(e, 'response') and hasattr(e.response, 'text') else str(e)}")
    except Exception as e:
        # Handle any other unexpected errors
        raise HTTPException(status_code=500, detail=f"An internal server error occurred: {str(e)}")

def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')
    import uvicorn

    uvicorn.run(app)

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
